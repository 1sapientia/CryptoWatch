// Code generated by protoc-gen-go. DO NOT EDIT.
// source: markets/pair.proto

package ProtobufMarkets

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PairUpdateMessage struct {
	Pair uint64 `protobuf:"varint,1,opt,name=pair" json:"pair,omitempty"`
	// Types that are valid to be assigned to Update:
	//	*PairUpdateMessage_VwapUpdate
	//	*PairUpdateMessage_PerformanceUpdate
	Update isPairUpdateMessage_Update `protobuf_oneof:"Update"`
}

func (m *PairUpdateMessage) Reset()                    { *m = PairUpdateMessage{} }
func (m *PairUpdateMessage) String() string            { return proto.CompactTextString(m) }
func (*PairUpdateMessage) ProtoMessage()               {}
func (*PairUpdateMessage) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type isPairUpdateMessage_Update interface {
	isPairUpdateMessage_Update()
}

type PairUpdateMessage_VwapUpdate struct {
	VwapUpdate *PairVwapUpdate `protobuf:"bytes,2,opt,name=vwapUpdate,oneof"`
}
type PairUpdateMessage_PerformanceUpdate struct {
	PerformanceUpdate *PairPerformanceUpdate `protobuf:"bytes,3,opt,name=performanceUpdate,oneof"`
}

func (*PairUpdateMessage_VwapUpdate) isPairUpdateMessage_Update()        {}
func (*PairUpdateMessage_PerformanceUpdate) isPairUpdateMessage_Update() {}

func (m *PairUpdateMessage) GetUpdate() isPairUpdateMessage_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *PairUpdateMessage) GetPair() uint64 {
	if m != nil {
		return m.Pair
	}
	return 0
}

func (m *PairUpdateMessage) GetVwapUpdate() *PairVwapUpdate {
	if x, ok := m.GetUpdate().(*PairUpdateMessage_VwapUpdate); ok {
		return x.VwapUpdate
	}
	return nil
}

func (m *PairUpdateMessage) GetPerformanceUpdate() *PairPerformanceUpdate {
	if x, ok := m.GetUpdate().(*PairUpdateMessage_PerformanceUpdate); ok {
		return x.PerformanceUpdate
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PairUpdateMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PairUpdateMessage_OneofMarshaler, _PairUpdateMessage_OneofUnmarshaler, _PairUpdateMessage_OneofSizer, []interface{}{
		(*PairUpdateMessage_VwapUpdate)(nil),
		(*PairUpdateMessage_PerformanceUpdate)(nil),
	}
}

func _PairUpdateMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PairUpdateMessage)
	// Update
	switch x := m.Update.(type) {
	case *PairUpdateMessage_VwapUpdate:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VwapUpdate); err != nil {
			return err
		}
	case *PairUpdateMessage_PerformanceUpdate:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PerformanceUpdate); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PairUpdateMessage.Update has unexpected type %T", x)
	}
	return nil
}

func _PairUpdateMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PairUpdateMessage)
	switch tag {
	case 2: // Update.vwapUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PairVwapUpdate)
		err := b.DecodeMessage(msg)
		m.Update = &PairUpdateMessage_VwapUpdate{msg}
		return true, err
	case 3: // Update.performanceUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PairPerformanceUpdate)
		err := b.DecodeMessage(msg)
		m.Update = &PairUpdateMessage_PerformanceUpdate{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PairUpdateMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PairUpdateMessage)
	// Update
	switch x := m.Update.(type) {
	case *PairUpdateMessage_VwapUpdate:
		s := proto.Size(x.VwapUpdate)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PairUpdateMessage_PerformanceUpdate:
		s := proto.Size(x.PerformanceUpdate)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type PairVwapUpdate struct {
	Vwap float64 `protobuf:"fixed64,1,opt,name=vwap" json:"vwap,omitempty"`
}

func (m *PairVwapUpdate) Reset()                    { *m = PairVwapUpdate{} }
func (m *PairVwapUpdate) String() string            { return proto.CompactTextString(m) }
func (*PairVwapUpdate) ProtoMessage()               {}
func (*PairVwapUpdate) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *PairVwapUpdate) GetVwap() float64 {
	if m != nil {
		return m.Vwap
	}
	return 0
}

type PairPerformanceUpdate struct {
	Window      string  `protobuf:"bytes,1,opt,name=window" json:"window,omitempty"`
	Performance float64 `protobuf:"fixed64,2,opt,name=performance" json:"performance,omitempty"`
}

func (m *PairPerformanceUpdate) Reset()                    { *m = PairPerformanceUpdate{} }
func (m *PairPerformanceUpdate) String() string            { return proto.CompactTextString(m) }
func (*PairPerformanceUpdate) ProtoMessage()               {}
func (*PairPerformanceUpdate) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *PairPerformanceUpdate) GetWindow() string {
	if m != nil {
		return m.Window
	}
	return ""
}

func (m *PairPerformanceUpdate) GetPerformance() float64 {
	if m != nil {
		return m.Performance
	}
	return 0
}

func init() {
	proto.RegisterType((*PairUpdateMessage)(nil), "ProtobufMarkets.PairUpdateMessage")
	proto.RegisterType((*PairVwapUpdate)(nil), "ProtobufMarkets.PairVwapUpdate")
	proto.RegisterType((*PairPerformanceUpdate)(nil), "ProtobufMarkets.PairPerformanceUpdate")
}

func init() { proto.RegisterFile("markets/pair.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xca, 0x4d, 0x2c, 0xca,
	0x4e, 0x2d, 0x29, 0xd6, 0x2f, 0x48, 0xcc, 0x2c, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x0f, 0x00, 0x51, 0x49, 0xa5, 0x69, 0xbe, 0x10, 0x39, 0xa5, 0x33, 0x8c, 0x5c, 0x82, 0x01, 0x89,
	0x99, 0x45, 0xa1, 0x05, 0x29, 0x89, 0x25, 0xa9, 0xbe, 0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0xa9, 0x42,
	0x42, 0x5c, 0x2c, 0x20, 0x4d, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x2c, 0x41, 0x60, 0xb6, 0x90, 0x23,
	0x17, 0x57, 0x59, 0x79, 0x62, 0x01, 0x44, 0xa1, 0x04, 0x93, 0x02, 0xa3, 0x06, 0xb7, 0x91, 0xbc,
	0x1e, 0x9a, 0x79, 0x7a, 0x20, 0xb3, 0xc2, 0xe0, 0xca, 0x3c, 0x18, 0x82, 0x90, 0x34, 0x09, 0x85,
	0x71, 0x09, 0x16, 0xa4, 0x16, 0xa5, 0xe5, 0x17, 0xe5, 0x26, 0xe6, 0x25, 0xa7, 0x42, 0x4d, 0x62,
	0x06, 0x9b, 0xa4, 0x86, 0xd5, 0xa4, 0x00, 0x74, 0xd5, 0x1e, 0x0c, 0x41, 0x98, 0x46, 0x38, 0x71,
	0x70, 0xb1, 0x41, 0x58, 0x4a, 0x2a, 0x5c, 0x7c, 0xa8, 0x2e, 0x00, 0x79, 0x05, 0xe4, 0x02, 0xb0,
	0x57, 0x18, 0x83, 0xc0, 0x6c, 0xa5, 0x40, 0x2e, 0x51, 0xac, 0xa6, 0x0b, 0x89, 0x71, 0xb1, 0x95,
	0x67, 0xe6, 0xa5, 0xe4, 0x97, 0x83, 0x95, 0x73, 0x06, 0x41, 0x79, 0x42, 0x0a, 0x5c, 0xdc, 0x48,
	0xb6, 0x82, 0x3d, 0xcf, 0x18, 0x84, 0x2c, 0x94, 0xc4, 0x06, 0x0e, 0x5f, 0x63, 0x40, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x0b, 0x6f, 0xf2, 0x2e, 0x75, 0x01, 0x00, 0x00,
}
